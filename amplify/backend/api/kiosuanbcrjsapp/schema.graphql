# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# Data Types https://docs.aws.amazon.com/appsync/latest/devguide/scalars.html
# https://docs.aws.amazon.com/appsync/latest/devguide/scalars.html
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

# Auth Models

type User @model 
{
  id: ID!
  name: String!
  dateOfBirth: AWSDate
  isProfileUpdated: Boolean!
  addresss: String
  cellphone: AWSPhone
  role: String!
  status: String
  email: AWSEmail
  wallets: [Wallet] @hasMany(indexName: "byUser", fields: ["id"])
  verifierVerifications: [Verification] @hasMany(indexName: "byVerifierUser", fields: ["id"])
  verifiedVerifications: [Verification] @hasMany(indexName: "byVerifiedUser", fields: ["id"])
  userProducts: [UserProduct] @hasMany(indexName: "byUser", fields: ["id"])
  documents: [Document] @hasMany(indexName: "byUser", fields: ["id"])
}

type Wallet @model 
  {
  id: ID!
  name: String!
  status: String!
  isSelected: Boolean
  userID: ID! @index(name: "byUser")
  user: User @belongsTo(fields: ["userID"])
}

type Verification @model {
  id: ID!
  createdOn: AWSDateTime
  updatedOn: AWSDateTime
  sign: String
  userVerifierID: ID @index(name: "byVerifierUser")
  userVerifier: User @belongsTo(fields: ["userVerifierID"])
  userVerifiedID: ID @index(name: "byVerifiedUser")
  userVerified: User @belongsTo(fields: ["userVerifiedID"])
  productFeatureID: ID! @index(name: "byProductFeature")
  productFeature: ProductFeature @belongsTo(fields: ["productFeatureID"])
  verificationComments: [VerificationComment] @hasMany(indexName: "byVerification", fields: ["id"])
}

type VerificationComment @model {
  id: ID!
  comment: String
  isCommentByVerifier: Boolean 
  verificationID: ID! @index(name: "byVerification")
  verification: Verification @belongsTo(fields: ["verificationID"])
}

type DocumentType @model {
  id: ID!
  name: String!
  description: String!
  documents: [Document] @hasMany(indexName: "byDocumentType", fields: ["id"])
}

type Document @model 
  {
  id: ID!
  data: AWSJSON!
  timeStamp: AWSTimestamp!
  docHash: String
  url: AWSURL
  signed: String
  signedHash: String
  isApproved: Boolean
  status: String
  isUploadedToBlockChain: Boolean
  documentTypeID: ID! @index(name: "byDocumentType")
  documentType: DocumentType @belongsTo(fields: ["documentTypeID"])
  productFeatureID: ID! @index(name: "byProductFeature")
  productFeature: ProductFeature @belongsTo(fields: ["productFeatureID"])
  userID: ID! @index(name: "byUser")
  user: User @belongsTo(fields: ["userID"])
}

# Product Models

type Category @model 
{
  id: ID!
  name: String!
  isSelected: Boolean
  products: [Product] @hasMany(indexName: "byCategory", fields: ["id"])
}

type Product @model 
{
  id: ID!
  name: String!
  description: String
  isActive: Boolean!
  counterNumberOfTimesBuyed: Int
  amountToBuy: Float
  order: Int
  status: String
  timeOnVerification: AWSTimestamp
  categoryID: ID! @index(name: "byCategory")
  category: Category @belongsTo(fields: ["categoryID"])
  images: [Image] @hasMany(indexName: "byProduct", fields: ["id"])
  productFeatures: [ProductFeature] @hasMany(indexName: "byProduct", fields: ["id"])
  userProducts: [UserProduct] @hasMany(indexName: "byProduct", fields: ["id"])
  transactions: [Transactions] @hasMany(indexName: "byProduct", fields: ["id"])
  xlsFormProducts: [XLSFormProduct] @hasMany(indexName: "byProduct", fields: ["id"])
}

type Image @model 
{
  id: ID!
  imageURL: String!
  format: String!
  title: String
  imageURLToDisplay: String
  isOnCarousel: Boolean
  carouselLabel: String
  carouselDescription: String
  isActive: Boolean!
  order: Int
  productID: ID! @index(name: "byProduct")
  product: Product @belongsTo(fields: ["productID"])
}

type FeatureType @model {
  id: ID!
  name: String!
  description: String
  features: [Feature] @hasMany(indexName: "byFeatureType", fields: ["id"])
}

type Feature @model 
{
  id: ID!
  name: String!
  description: String
  isTemplate: Boolean
  isVerifable: Boolean
  defaultValue: Float
  formOrder: Int
  formHint: String
  formRequired: Boolean
  formAppearance: String
  formRelevant: String
  formConstraint: String
  formRequiredMessage: String
  parentID: ID @index(name: "byParent", queryField: "featureByParent")
  children: [Feature] @hasMany (indexName: "byParent", fields: ["id"]) 
  featureTypeID: ID @index(name: "byFeatureType")
  featureType: FeatureType @belongsTo(fields: ["featureTypeID"])
  unitOfMeasureID: ID @index(name: "byUnitOfMeasure")
  unitOfMeasure: UnitOfMeasure @belongsTo(fields: ["unitOfMeasureID"])
  productFeatures: [ProductFeature] @hasMany(indexName: "byFeature", fields: ["id"])
  featureFormulas: [FeatureFormula] @hasMany(indexName: "byFeature", fields: ["id"])
  xlsFormTypeID: ID @index(name: "byXLSFormType")
  xlsFormType: XLSFormType @belongsTo(fields: ["xlsFormTypeID"])
  xlsFormGroupID: ID @index(name: "byXLSFormGroup")
  xlsFormGroup: XLSFormGroup @belongsTo(fields: ["xlsFormGroupID"])
  xlsFormChoices: [XLSFormChoice] @hasMany(indexName: "byFeature", fields: ["id"])

}
# Formulas
type UnitOfMeasure @model {
  id: ID!
  engineeringUnit: String!
  description: String
  isFloat: Boolean
  features: [Feature] @hasMany(indexName: "byUnitOfMeasure", fields: ["id"])
  formulas: [Formula] @hasMany(indexName: "byUnitOfMeasure", fields: ["id"])
}

type Formula @model 
{
  id: ID!
  varID: String!
  equation: String!
  unitOfMeasureID: ID @index(name: "byUnitOfMeasure")
  unitOfMeasure: UnitOfMeasure @belongsTo(fields: ["unitOfMeasureID"])
  results: [Result] @hasMany(indexName: "byFormula", fields: ["id"])
  featureFormulas: [FeatureFormula] @hasMany(indexName: "byFormula", fields: ["id"])
}

type FeatureFormula @model {
  id: ID!
  featureID: ID! @index(name: "byFeature")
  feature: Feature @belongsTo(fields: ["featureID"])
  formulaID: ID! @index(name: "byFormula")
  formula: Formula @belongsTo(fields: ["formulaID"])
}

type Result @model 
{
  id: ID!
  varID: String!
  value: Float
  dateTimeStamp: AWSTimestamp
  formulaID: ID! @index(name: "byFormula")
  formula: Formula @belongsTo(fields: ["formulaID"])
  productFeatureResults: [ProductFeatureResult] @hasMany(indexName: "byResult", fields: ["id"]) 
}

type ProductFeature @model 
{
  id: ID!
  value: String
  isToBlockChain: Boolean
  order: Int
  isOnMainCard: Boolean
  isResult: Boolean
  productID: ID! @index(name: "byProduct")
  product: Product @belongsTo(fields: ["productID"])
  featureID: ID! @index(name: "byFeature")
  feature: Feature @belongsTo(fields: ["featureID"])
  verifications: [Verification] @hasMany(indexName: "byProductFeature", fields: ["id"])
  documents: [Document] @hasMany(indexName: "byProductFeature", fields: ["id"])
  productFeatureResults: [ProductFeatureResult] @hasMany(indexName: "byProductFeature", fields: ["id"]) 
}

type ProductFeatureResult @model {
  id: ID!
  isActive: Boolean!
  productFeatureID: ID @index(name: "byProductFeature")
  productFeature: ProductFeature @belongsTo(fields: ["productFeatureID"])
  resultID: ID @index(name: "byResult")
  result: Result @belongsTo(fields: ["resultID"])
}

type UserProduct @model {
  id: ID!
  isFavorite: Boolean
  userID: ID! @index(name: "byUser")
  user: User @belongsTo(fields: ["userID"])
  productID: ID! @index(name: "byProduct")
  product: Product @belongsTo(fields: ["productID"])
  orders: [Order] @hasMany(indexName: "byUserProduct", fields: ["id"])
}

type Order @model {
  id: ID! # local order ID 
  amountOfTokens: Int
  currencyCode: String
  fiatTotalAmount: Float
  statusCode: String
  externalOrderId: String
  confirmation: String
  userProductID: ID! @index(name: "byUserProduct")
  userProduct: UserProduct @belongsTo(fields: ["userProductID"])
}

type Transactions @model {
  id: ID!
  addressOrigin: String
  addressDestination: String
  txIn: String
  txCborhex: String 
  txHash: String
  metadataUrl: String
  fees: Float
  network: String
  txProcessed: Boolean
  type: String
  productID: ID! @index(name: "byProduct")
  product: Product @belongsTo(fields: ["productID"])
}

# XLSForm Models

type XLSForm @model {
  id: ID!
  name: String!
  version: String
  xlsFormGroups: [XLSFormGroup] @hasMany(indexName: "byXLSForm", fields: ["id"])
}

type XLSFormProduct @model {
  id: ID!
  productID: ID! @index(name: "byProduct")
  product: Product @belongsTo(fields: ["productID"])
  xlsFormID: ID! @index(name: "byXLSForm")
  xlsForm: Product @belongsTo(fields: ["xlsFormID"])
}

type XLSFormType @model {
  id: ID!
  name: String!
  features: [Feature] @hasMany(indexName: "byXLSFormType", fields: ["id"])
}

type XLSFormGroup @model {
  id: ID!
  name: String!
  features: [Feature] @hasMany(indexName: "byXLSFormGroup", fields: ["id"])
  xlsFormID: ID @index(name: "byXLSForm")
  xlsForm: XLSForm @belongsTo(fields: ["xlsFormID"])
}

type XLSFormChoice @model {
  id: ID!
  listName: String!
  name: String!
  label: String!
  featureID: ID! @index(name: "byFeature")
  feature: Feature @belongsTo(fields: ["featureID"])
}
